package TicTacToeGame;

import java.awt.Color;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;

//Jessica Russ
//Assignment 4
//April 2019
//feel free to generate javadocs ( i took the time to write them)

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author clatulip
 */
public class GameBoard extends javax.swing.JFrame {

    private GameDataModel myModel;

    /**
     * Creates new form GameBoard
     */
    public GameBoard(GameDataModel myModel) {
        this.myModel = myModel;
        initComponents();
        getContentPane().setBackground(new Color(121, 208, 195));
        refreshLabel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabelTurn = new javax.swing.JLabel();
        jLayeredPaneTTT = new javax.swing.JLayeredPane();
        jButtonNextRound = new javax.swing.JButton();
        jButtonQuit = new javax.swing.JButton();
        jRoundsLabel = new javax.swing.JLabel();
        jButtonTopRight = new javax.swing.JButton();
        jButtonMiddleLeft = new javax.swing.JButton();
        jButtonTopMiddle = new javax.swing.JButton();
        jButtonCenter = new javax.swing.JButton();
        jButtonMiddleRight = new javax.swing.JButton();
        jButtonTopLeft = new javax.swing.JButton();
        jButtonBottomMiddle = new javax.swing.JButton();
        jLabelGrid = new javax.swing.JLabel();
        jButtonBottomLeft = new javax.swing.JButton();
        jButtonBottomRight = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Tic Tac Toe");

        jLabelTurn.setFont(new java.awt.Font("Myanmar Text", 1, 18)); // NOI18N
        jLabelTurn.setForeground(new java.awt.Color(102, 102, 102));
        jLabelTurn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTurn.setText("Player X Turn");

        jButtonNextRound.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButtonNextRound.setText("Next Round");
        jButtonNextRound.setEnabled(false);
        jButtonNextRound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextRoundActionPerformed(evt);
            }
        });

        jButtonQuit.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButtonQuit.setText("Quit");
        jButtonQuit.setEnabled(false);
        jButtonQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonQuitActionPerformed(evt);
            }
        });

        jRoundsLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRoundsLabel.setForeground(new java.awt.Color(0, 51, 255));
        jRoundsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jRoundsLabel.setText("jLabel3");

        jButtonTopRight.setBorderPainted(false);
        jButtonTopRight.setFocusPainted(false);
        jButtonTopRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTopRightActionPerformed(evt);
            }
        });

        jButtonMiddleLeft.setBorderPainted(false);
        jButtonMiddleLeft.setFocusPainted(false);
        jButtonMiddleLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMiddleLeftActionPerformed(evt);
            }
        });

        jButtonTopMiddle.setBorderPainted(false);
        jButtonTopMiddle.setFocusPainted(false);
        jButtonTopMiddle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTopMiddleActionPerformed(evt);
            }
        });

        jButtonCenter.setBorderPainted(false);
        jButtonCenter.setFocusPainted(false);
        jButtonCenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCenterActionPerformed(evt);
            }
        });

        jButtonMiddleRight.setBorderPainted(false);
        jButtonMiddleRight.setFocusPainted(false);
        jButtonMiddleRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMiddleRightActionPerformed(evt);
            }
        });

        jButtonTopLeft.setBorderPainted(false);
        jButtonTopLeft.setFocusPainted(false);
        jButtonTopLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTopLeftActionPerformed(evt);
            }
        });

        jButtonBottomMiddle.setBorderPainted(false);
        jButtonBottomMiddle.setFocusPainted(false);
        jButtonBottomMiddle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBottomMiddleActionPerformed(evt);
            }
        });

        jLabelGrid.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/Grid.png"))); // NOI18N

        jButtonBottomLeft.setBorderPainted(false);
        jButtonBottomLeft.setFocusPainted(false);
        jButtonBottomLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBottomLeftActionPerformed(evt);
            }
        });

        jButtonBottomRight.setBorderPainted(false);
        jButtonBottomRight.setFocusPainted(false);
        jButtonBottomRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBottomRightActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jLayeredPaneTTT, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButtonMiddleLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(120, 120, 120)
                        .addComponent(jButtonMiddleRight, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButtonBottomLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jButtonBottomMiddle, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jButtonBottomRight, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jButtonCenter, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButtonTopLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(120, 120, 120)
                        .addComponent(jButtonTopRight, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jButtonTopMiddle, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelGrid, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(391, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jButtonQuit, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonNextRound, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelTurn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jRoundsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(31, 31, 31))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addGap(14, 14, 14)
                        .addComponent(jLabelTurn)
                        .addGap(9, 9, 9)
                        .addComponent(jRoundsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jLayeredPaneTTT, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonTopLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonTopRight, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonMiddleLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonMiddleRight, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonBottomLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonBottomMiddle, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonBottomRight, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(120, 120, 120)
                                .addComponent(jButtonCenter, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jButtonTopMiddle, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabelGrid, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonNextRound, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                    .addComponent(jButtonQuit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Method for when the top left is clicked
     * @param evt 
     */
    private void jButtonTopLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTopLeftActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(0, jButtonTopLeft);
        }
    }//GEN-LAST:event_jButtonTopLeftActionPerformed
    /**
     * Method for when the top middle is clicked
     * @param evt 
     */
    private void jButtonTopMiddleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTopMiddleActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(1, jButtonTopMiddle);
        }
    }//GEN-LAST:event_jButtonTopMiddleActionPerformed
    /**
     * Method for when the top right is clicked
     * @param evt 
     */
    private void jButtonTopRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTopRightActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(2, jButtonTopRight);
        }
    }//GEN-LAST:event_jButtonTopRightActionPerformed
    /**
     * Method for when the middle left is clicked
     * @param evt 
     */
    private void jButtonMiddleLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMiddleLeftActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(3, jButtonMiddleLeft);
        }
    }//GEN-LAST:event_jButtonMiddleLeftActionPerformed
    /**
     * Method for when the center is clicked
     * @param evt 
     */
    private void jButtonCenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCenterActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(4, jButtonCenter);
        }
    }//GEN-LAST:event_jButtonCenterActionPerformed
    /**
     * Method for when middle right is clicked
     * @param evt 
     */
    private void jButtonMiddleRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMiddleRightActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(5, jButtonMiddleRight);
        }
    }//GEN-LAST:event_jButtonMiddleRightActionPerformed
    /**
     * Method for when bottom left is clicked
     * @param evt 
     */
    private void jButtonBottomLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBottomLeftActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(6, jButtonBottomLeft);
        }
    }//GEN-LAST:event_jButtonBottomLeftActionPerformed
    /**
     * Method for when bottom middle is clicked
     * @param evt 
     */
    private void jButtonBottomMiddleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBottomMiddleActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(7, jButtonBottomMiddle);
        }
    }//GEN-LAST:event_jButtonBottomMiddleActionPerformed

    /**
     * Method for when the bottom right is clicked
     * @param evt 
     */
    private void jButtonBottomRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBottomRightActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(8, jButtonBottomRight);
        }
    }//GEN-LAST:event_jButtonBottomRightActionPerformed

    /**
     * Method for when the next round button is clicked
     * @param evt 
     */
    private void jButtonNextRoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextRoundActionPerformed
        myModel.startNewRound();


    }//GEN-LAST:event_jButtonNextRoundActionPerformed

    /**
     * Method for when the quit button is clicked
     * @param evt 
     */
    private void jButtonQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonQuitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButtonQuitActionPerformed

    /**
     * Method to set a button red based on what type of token is passed in
     *
     * @param t
     * @param button
     */
    private void setButtonRed(Token t, javax.swing.JButton button) {

        //if the token is an o, change the o to a red o
        if (t == Token.O) {
            button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon_Red.png")));

            //if the token is an x, change the x to a red x
        } else {
            button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon_Red.png")));
        }
    }

    /**
     * Method to change a button based on the index and button selected
     *
     * @param index
     * @param button
     */
    public void buttonAction(int index, javax.swing.JButton button) {

        // Try to change the token
        if (!myModel.changeToken(index)) {
            return;
        }

        // changed token, so update image
        if (myModel.getToken(index) == Token.O) {
            button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
        } else {
            button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

        }

        // check to see if game is won
        if (myModel.isGameOver()) {
            Token t = myModel.getToken(index);
            updateColor(t);
        }

        // update label
        refreshLabel();

        // if it's now the computer's turn call that method
        if (!myModel.isP1Turn() && !myModel.isTwoPlayers()) {
            
            try {
                Thread.sleep(1000);
                computerTurn();
            } catch (InterruptedException ex) {
                Logger.getLogger(GameBoard.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

    /**
     * Method to update the colors of the winning line
     *
     * @param t
     */
    public void updateColor(Token t) {
        //TO DO: update colors of winning row/column/diagonal line

        //if win is top row
        if (myModel.getWin() == Win.TOP_ROW) {

            //set the button red for index 0, 1, and 2
            setButtonRed(t, jButtonTopRight);
            setButtonRed(t, jButtonTopMiddle);
            setButtonRed(t, jButtonTopLeft);
        }

        //if win is mid row
        if (myModel.getWin() == Win.MID_ROW) {

            //set the button red for index 3, 4,5
            setButtonRed(t, jButtonMiddleRight);
            setButtonRed(t, jButtonCenter);
            setButtonRed(t, jButtonMiddleLeft);
        }

        //if win is bot row
        if (myModel.getWin() == Win.BOT_ROW) {

            //set the buton red for index 6,7,8
            setButtonRed(t, jButtonBottomRight);
            setButtonRed(t, jButtonBottomMiddle);
            setButtonRed(t, jButtonBottomLeft);
        }

        //if win is left col
        if (myModel.getWin() == Win.LEFT_COL) {

            //set the buton red for index 0,3,6
            setButtonRed(t, jButtonTopLeft);
            setButtonRed(t, jButtonMiddleLeft);
            setButtonRed(t, jButtonBottomLeft);
        }

        //if win is mid col
        if (myModel.getWin() == Win.MID_COL) {

            //set the buton red for index 1,4,7
            setButtonRed(t, jButtonTopMiddle);
            setButtonRed(t, jButtonCenter);
            setButtonRed(t, jButtonBottomMiddle);
        }
        //if win is right col
        if (myModel.getWin() == Win.RIGHT_COL) {

            //set the buton red for index3,6,9
            setButtonRed(t, jButtonTopRight);
            setButtonRed(t, jButtonMiddleRight);
            setButtonRed(t, jButtonBottomRight);
        }

        //if win is diag 1
        if (myModel.getWin() == Win.DIAG1) {

            //set the buton red for index 0,4,8
            setButtonRed(t, jButtonTopLeft);
            setButtonRed(t, jButtonCenter);
            setButtonRed(t, jButtonBottomRight);
        }

        //if win is diag 2
        if (myModel.getWin() == Win.DIAG2) {

            //set the buton red for index 2,4,6
            setButtonRed(t, jButtonTopRight);
            setButtonRed(t, jButtonCenter);
            setButtonRed(t, jButtonBottomLeft);
        }

        //if there is no win
        if (myModel.getWin() == Win.NONE) {
            jLabelTurn.setText("Its a tie");
        }

    }

    /**
     * Method to have the computer play a turn against an opponent
     */
    public void computerTurn() {
        //TO DO: implement this method so that the computer selects a location and a token is shown in the game board

        //create a button variable
        JButton button;

        // Implement changing the token
        // Try to change the token
        //my strategy for the computer turn is to have the computer go through all of the possible combinations
        // of 2 pieces that are side by side to see if there is a place the opponent can win
        
        //if there is a place for the opponent to possibly win, the computer will place its piece beside the two 
        // to block the other players win
        //if there arent any combinations of 2 for an opponent to possibly win
        //then the computer will choose the first available space from 0 to 8
        
        //to check each possible combinations of 2, the if statements include
        //that the get token for each of the 2 pieces have to be equal
        //that the tokens cant be blank
        //and that the third token to make a win is blank
        
        //if the opponent has a piece in 0 and 1 place your piece in spot 2 to stop a top row win
        if (myModel.getToken(0) == myModel.getToken(1) && myModel.getToken(0) != Token.Blank && myModel.getToken(2) == Token.Blank) {

            // Try to change the token
            if (!myModel.changeToken(2)) {
                return;
            }

            //associate the button for index 2 to the top right
            button = jButtonTopRight;

            // changed token, so update image
            if (myModel.getToken(2) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(2);
                updateColor(t);
            }

            // update label
            refreshLabel();

        } //if the opponent has a piece in 1 and 2 place your piece in spot 0 to stop a top row win
        else if (myModel.getToken(2) == myModel.getToken(1) && myModel.getToken(2) != Token.Blank && myModel.getToken(0) == Token.Blank) {

            // Try to change the token
            if (!myModel.changeToken(0)) {
                return;
            }

            //associate the button for index 0 to the top left
            button = jButtonTopLeft;

            // changed token, so update image
            if (myModel.getToken(0) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(0);
                updateColor(t);
            }

            // update label
            refreshLabel();

        } //if the opponent has a piece in 2 and 0 place your piece in spot 1 to stop a top row win
        else if (myModel.getToken(0) == myModel.getToken(2) && myModel.getToken(2) != Token.Blank && myModel.getToken(1) == Token.Blank) {

            // Try to change the token
            if (!myModel.changeToken(1)) {
                return;
            }

            //associate the button for index 1 to the top middle
            button = jButtonTopMiddle;

            // changed token, so update image
            if (myModel.getToken(1) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(1);
                updateColor(t);
            }

            // update label
            refreshLabel();

        } //if the opponent has a piece in 3 and 4 place your piece in spot 5 to stop a mid row win
        else if (myModel.getToken(3) == myModel.getToken(4) && myModel.getToken(3) != Token.Blank && myModel.getToken(5) == Token.Blank) {

            // Try to change the token
            if (!myModel.changeToken(5)) {
                return;
            }

            //associate the button for index 5 to the middle right
            button = jButtonMiddleRight;

            // changed token, so update image
            if (myModel.getToken(5) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(5);
                updateColor(t);
            }

            // update label
            refreshLabel();

        } //if the opponent has a piece in 4 and 5 place your piece in spot 3 to stop a mid row win
        else if (myModel.getToken(4) == myModel.getToken(5) && myModel.getToken(4) != Token.Blank && myModel.getToken(3) == Token.Blank) {

            // Try to change the token
            if (!myModel.changeToken(3)) {
                return;
            }

            //associate the button for index 3 to the middle left
            button = jButtonMiddleLeft;

            // changed token, so update image
            if (myModel.getToken(3) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(3);
                updateColor(t);
            }

            // update label
            refreshLabel();

        } //if the opponent has a piece in 3 and 5 place your piece in spot 4 to stop a mid row win
        else if (myModel.getToken(3) == myModel.getToken(5) && myModel.getToken(3) != Token.Blank && myModel.getToken(4) == Token.Blank) {

            // Try to change the token
            if (!myModel.changeToken(4)) {
                return;
            }

            //associate the button for index 4 to the center
            button = jButtonCenter;
            
            // changed token, so update image
            if (myModel.getToken(4) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(4);
                updateColor(t);
            }

            // update label
            refreshLabel();
        } 

        //if the opponent has a piece in 6 and 7 place your piece in spot 8 to stop a bot row win
        else if (myModel.getToken(6) == myModel.getToken(7) && myModel.getToken(6) != Token.Blank && myModel.getToken(8) == Token.Blank) {
            
            // Try to change the token
            if (!myModel.changeToken(8)) {
                return;
            }
            
            //associate the button for index 8 to the bottom right
            button = jButtonBottomRight;
            
            // changed token, so update image
            if (myModel.getToken(8) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(8);
                updateColor(t);
            }

            // update label
            refreshLabel();
        } 

        //if the opponent has a piece in 7 and 8 place your piece in spot 6 to stop a bot row win
        else if (myModel.getToken(7) == myModel.getToken(8) && myModel.getToken(7) != Token.Blank && myModel.getToken(6) == Token.Blank) {
            
            // Try to change the token
            if (!myModel.changeToken(6)) {
                return;
            }
            
            //associate the button for index 6 to the bottom left
            button = jButtonBottomLeft;
            
            // changed token, so update image
            if (myModel.getToken(6) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(6);
                updateColor(t);
            }

            // update label
            refreshLabel();
        } 

        //if the opponent has a piece in 6 and 8 place your piece in spot 7 to stop a bot row win
        else if (myModel.getToken(6) == myModel.getToken(8) && myModel.getToken(6) != Token.Blank && myModel.getToken(7) == Token.Blank) {
            
            // Try to change the token
            if (!myModel.changeToken(7)) {
                return;
            }
            
            //associate the button for index 7 to the bottom middle
            button = jButtonBottomMiddle;
            
            // changed token, so update image
            if (myModel.getToken(7) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(7);
                updateColor(t);
            }

            // update label
            refreshLabel();

        } 

        //if the opponent has a piece in 0 and 3 place your piece in spot 6 to stop a left col win
        else if (myModel.getToken(0) == myModel.getToken(3) && myModel.getToken(3) != Token.Blank && myModel.getToken(6) == Token.Blank) {
            
            // Try to change the token
            if (!myModel.changeToken(6)) {
                return;
            }
            
            //associate the button for index 6 to the bottom left
            button = jButtonBottomLeft;
            
            // changed token, so update image
            if (myModel.getToken(6) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(6);
                updateColor(t);
            }

            // update label
            refreshLabel();

        } 

        //if the opponent has a piece in 3 and 6 place your piece in spot 0 to stop a left col win
        else if (myModel.getToken(3) == myModel.getToken(6) && myModel.getToken(3) != Token.Blank && myModel.getToken(0) == Token.Blank) {
            
            // Try to change the token
            if (!myModel.changeToken(0)) {
                return;
            }

            //associate the button for index 0 to the top left
            button = jButtonTopLeft;
            
            // changed token, so update image
            if (myModel.getToken(0) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(0);
                updateColor(t);
            }

            // update label
            refreshLabel();

        } 

        //if the opponent has a piece in 0 and 6 place your piece in spot 3 to stop a left col win
        else if (myModel.getToken(0) == myModel.getToken(6) && myModel.getToken(6) != Token.Blank && myModel.getToken(3) == Token.Blank) {
            
            // Try to change the token
            if (!myModel.changeToken(3)) {
                return;
            }
            
            //associate the button for index 3 to the middle left
            button = jButtonMiddleLeft;
            
            // changed token, so update image
            if (myModel.getToken(3) == Token.O) {

                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(3);
                updateColor(t);
            }

            // update label
            refreshLabel();

        } 

        //if the opponent has a piece in 1 and 4 place your piece in spot 7 to stop a mid col win
        else if (myModel.getToken(1) == myModel.getToken(4) && myModel.getToken(1) != Token.Blank && myModel.getToken(7) == Token.Blank) {
            
            // Try to change the token
            if (!myModel.changeToken(7)) {
                return;
            }
            
            //associate the button for index 7 to the bottom middle
            button = jButtonBottomMiddle;
            
            // changed token, so update image
            if (myModel.getToken(7) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(7);
                updateColor(t);
            }

            // update label
            refreshLabel();

        } 

        //if the opponent has a piece in 1 and 7 place your piece in spot 4 to stop a mid col win
        else if (myModel.getToken(7) == myModel.getToken(1) && myModel.getToken(7) != Token.Blank && myModel.getToken(4) == Token.Blank) {
            
            // Try to change the token
            if (!myModel.changeToken(4)) {
                return;
            }
            
            //associate the button for index 4 to the center
            button = jButtonCenter;
            
            // changed token, so update image
            if (myModel.getToken(4) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(4);
                updateColor(t);
            }

            // update label
            refreshLabel();

        } 

        //if the opponent has a piece in 4 and 7 place your piece in spot 1 to stop a mid col win
        else if (myModel.getToken(4) == myModel.getToken(7) && myModel.getToken(4) != Token.Blank && myModel.getToken(1) == Token.Blank) {
            
            // Try to change the token
            if (!myModel.changeToken(1)) {
                return;
            }

            //associate the button for index 1 to the top middle
            button = jButtonTopMiddle;
            
            // changed token, so update image
            if (myModel.getToken(1) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(1);
                updateColor(t);
            }

            // update label
            refreshLabel();

        } 

        //if the opponent has a piece in 2 and 5 place your piece in spot 8 to stop a right col win
        else if (myModel.getToken(2) == myModel.getToken(5) && myModel.getToken(2) != Token.Blank && myModel.getToken(8) == Token.Blank) {
            
            // Try to change the token
            if (!myModel.changeToken(8)) {
                return;
            }

            //associate the button for index 8 to the bottom right
            button = jButtonBottomRight;
            
            // changed token, so update image
            if (myModel.getToken(8) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(8);
                updateColor(t);
            }

            // update label
            refreshLabel();

        } 

        //if the opponent has a piece in 5 and 8 place your piece in spot 2 to stop a right col win
        else if (myModel.getToken(5) == myModel.getToken(8) && myModel.getToken(5) != Token.Blank && myModel.getToken(2) == Token.Blank) {
            
            // Try to change the token
            if (!myModel.changeToken(2)) {
                return;
            }
            
            //associate the button for index 2 to the top right
            button = jButtonTopRight;
            
            // changed token, so update image
            if (myModel.getToken(2) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(2);
                updateColor(t);
            }

            // update label
            refreshLabel();

        } 

        //if the opponent has a piece in 2 and 8 place your piece in spot 5 to stop a right col win
        else if (myModel.getToken(2) == myModel.getToken(8) && myModel.getToken(2) != Token.Blank && myModel.getToken(5) == Token.Blank) {
            
            // Try to change the token
            if (!myModel.changeToken(5)) {
                return;
            }

            //associate the button for index 5 to the middle right
            button = jButtonMiddleRight;
            
            // changed token, so update image
            if (myModel.getToken(5) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(5);
                updateColor(t);
            }

            // update label
            refreshLabel();

        } 

        //if the opponent has a piece in 0 and 4 place your piece in spot 8 to stop a diag 1 win
        else if (myModel.getToken(0) == myModel.getToken(4) && myModel.getToken(0) != Token.Blank && myModel.getToken(8) == Token.Blank) {
            
            // Try to change the token
            if (!myModel.changeToken(8)) {
                return;
            }

            //associate the button for index 8 to the bottom right
            button = jButtonBottomRight;
            
            // changed token, so update image
            if (myModel.getToken(8) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(8);
                updateColor(t);
            }

            // update label
            refreshLabel();

        } 

        //if the opponent has a piece in 8 and 4 place your piece in spot 0 to stop a diag 1 win
        else if (myModel.getToken(8) == myModel.getToken(4) && myModel.getToken(8) != Token.Blank && myModel.getToken(0) == Token.Blank) {
            
            // Try to change the token
            if (!myModel.changeToken(0)) {
                return;
            }

            //associate the button for index 0 to the top left
            button = jButtonTopLeft;
            
            // changed token, so update image
            if (myModel.getToken(0) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(0);
                updateColor(t);
            }

            // update label
            refreshLabel();

        } 

        //if the opponent has a piece in 0 and 8 place your piece in spot 4 to stop a diag 1 win
        else if (myModel.getToken(0) == myModel.getToken(8) && myModel.getToken(0) != Token.Blank && myModel.getToken(4) == Token.Blank) {
            
            // Try to change the token
            if (!myModel.changeToken(4)) {
                return;
            }

            //associate the button for index 4 to the center
            button = jButtonCenter;
            
            // changed token, so update image
            if (myModel.getToken(4) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(4);
                updateColor(t);
            }

            // update label
            refreshLabel();

        } 

        //if the opponent has a piece in 2 and 4 place your piece in spot 6 to stop a diag 2 win
        else if (myModel.getToken(2) == myModel.getToken(4) && myModel.getToken(2) != Token.Blank && myModel.getToken(6) == Token.Blank) {
            
            // Try to change the token
            if (!myModel.changeToken(6)) {
                return;
            }

            //associate the button for index 6 to the bottom left
            button = jButtonBottomLeft;
            
            // changed token, so update image
            if (myModel.getToken(6) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(6);
                updateColor(t);
            }

            // update label
            refreshLabel();

        } 

        //if the opponent has a piece in 6 and 4 place your piece in spot 2 to stop a diag 2 win
        else if (myModel.getToken(6) == myModel.getToken(4) && myModel.getToken(6) != Token.Blank && myModel.getToken(2) == Token.Blank) {

            // Try to change the token
            if (!myModel.changeToken(2)) {
                return;
            }

            //associate the button for index 2 to the top right
            button = jButtonTopRight;
            
            // changed token, so update image
            if (myModel.getToken(2) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(2);
                updateColor(t);
            }

            // update label
            refreshLabel();

        } 

        //if the opponent has a piece in 2 and 6 place your piece in spot 4 to stop a diag 2 win
        else if (myModel.getToken(2) == myModel.getToken(6) && myModel.getToken(2) != Token.Blank && myModel.getToken(4) == Token.Blank) {
            
            // Try to change the token
            if (!myModel.changeToken(4)) {
                return;
            }
            
            //associate the button for index 4 to the center
            button = jButtonCenter;
            
            // changed token, so update image
            if (myModel.getToken(4) == Token.O) {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
            } else {
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

            }

            // check to see if game is won
            if (myModel.isGameOver()) {
                Token t = myModel.getToken(4);
                updateColor(t);
            }

            // update label
            refreshLabel();

        //if no two moves chosen just chose 0 through 8 based on availability
        } else {

            //if the top left space (index 0) is blank
            if (myModel.getToken(0) == Token.Blank) {
                
                // Try to change the token
                if (!myModel.changeToken(0)) {
                    return;
                }
                
                //associate the button for index 0 to the top left
                button = jButtonTopLeft;
                
                // changed token, so update image
                if (myModel.getToken(0) == Token.O) {
                    button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
                } else {
                    button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

                }

                // check to see if game is won
                if (myModel.isGameOver()) {
                    Token t = myModel.getToken(0);
                    updateColor(t);
                }

                // update label
                refreshLabel();

            }
            
             // if the top middle space (index 1) is blank
             else if (myModel.getToken(1) == Token.Blank) {
                 
                // Try to change the token
                if (!myModel.changeToken(1)) {
                    return;
                }

                //associate the button for index 1 to the top middle
                button = jButtonTopMiddle;
                
                // changed token, so update image
                if (myModel.getToken(1) == Token.O) {
                    button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
                } else {
                    button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

                }

                // check to see if game is won
                if (myModel.isGameOver()) {
                    Token t = myModel.getToken(1);
                    updateColor(t);
                }

                // update label
                refreshLabel();

            } 
             
             //if the top right space (index 2) is blank
             else if (myModel.getToken(2) == Token.Blank) {
                 
                // Try to change the token
                if (!myModel.changeToken(2)) {
                    return;
                }

                //associate the button for index 2 to the top right
                button = jButtonTopRight;
                
                // changed token, so update image
                if (myModel.getToken(2) == Token.O) {
                    button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
                } else {
                    button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

                }

                // check to see if game is won
                if (myModel.isGameOver()) {
                    Token t = myModel.getToken(2);
                    updateColor(t);
                }

                // update label
                refreshLabel();

            } 
             
             //if the middle left space (index 3) is blank
             else if (myModel.getToken(3) == Token.Blank) {
                 
                // Try to change the token
                if (!myModel.changeToken(3)) {
                    return;
                }

                //associate the button for index 3 to the middle left
                button = jButtonMiddleLeft;
                
                // changed token, so update image
                if (myModel.getToken(3) == Token.O) {
                    button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
                } else {
                    button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

                }

                // check to see if game is won
                if (myModel.isGameOver()) {
                    Token t = myModel.getToken(3);
                    updateColor(t);
                }

                // update label
                refreshLabel();

            } 
             
             //if the center space(index 4) is blank
             else if (myModel.getToken(4) == Token.Blank) {
                 
                // Try to change the token
                if (!myModel.changeToken(4)) {
                    return;
                }

                //associate the button for index 4 to the center
                button = jButtonCenter;
                
                // changed token, so update image
                if (myModel.getToken(4) == Token.O) {
                    button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
                } else {
                    button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

                }

                // check to see if game is won
                if (myModel.isGameOver()) {
                    Token t = myModel.getToken(4);
                    updateColor(t);
                }

                // update label
                refreshLabel();

            } 
             
             //if the middle right space (index 5) is blank
             else if (myModel.getToken(5) == Token.Blank) {
                 
                // Try to change the token
                if (!myModel.changeToken(5)) {
                    return;
                }

                //associate the button for index 5 to the middle right
                button = jButtonMiddleRight;
                
                // changed token, so update image
                if (myModel.getToken(5) == Token.O) {
                    button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
                } else {
                    button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

                }

                // check to see if game is won
                if (myModel.isGameOver()) {
                    Token t = myModel.getToken(5);
                    updateColor(t);
                }

                // update label
                refreshLabel();

            }
             
             //if the bottom left space (index 6) is blank
             else if (myModel.getToken(6) == Token.Blank) {
                 
                // Try to change the token
                if (!myModel.changeToken(6)) {
                    return;
                }

                //associate the button for index 6 to the bottom left
                button = jButtonBottomLeft;
                
                // changed token, so update image
                if (myModel.getToken(6) == Token.O) {
                    button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
                } else {
                    button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

                }

                // check to see if game is won
                if (myModel.isGameOver()) {
                    Token t = myModel.getToken(6);
                    updateColor(t);
                }

                // update label
                refreshLabel();

            } 
             
             //if the bottom middle space (index 7) is blank
             else if (myModel.getToken(7) == Token.Blank) {
                 
                // Try to change the token
                if (!myModel.changeToken(7)) {
                    return;
                }

                //associate the button for index 7 to the bottom middle
                button = jButtonBottomMiddle;
                
                // changed token, so update image
                if (myModel.getToken(7) == Token.O) {
                    button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
                } else {
                    button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

                }

                // check to see if game is won
                if (myModel.isGameOver()) {
                    Token t = myModel.getToken(7);
                    updateColor(t);
                }

                // update label
                refreshLabel();

            } 
             
             //if the bottom right space (index 8) is blank
             else {
                 
                // Try to change the token
                if (!myModel.changeToken(8)) {
                    return;
                }

                //associate the button for index 8 to the bottoms right
                button = jButtonBottomRight;
                
                // changed token, so update image
                if (myModel.getToken(8) == Token.O) {
                    button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
                } else {
                    button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

                }

                // check to see if game is won
                if (myModel.isGameOver()) {
                    Token t = myModel.getToken(8);
                    updateColor(t);
                }

                // update label
                refreshLabel();

            }

        }

    }

    /**
     * Method to refresh the labels based on actions performed
     */
    public void refreshLabel() {

        // pause for a bit
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            Logger.getLogger(GameBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
        Player p1 = myModel.getP1( );
        Player p2 = myModel.getP2( );
        
        int numRounds = myModel.getRound();
            int p1Wins = p1.getRoundsWon();
            int p2Wins = p2.getRoundsWon();
            int numTies = numRounds - p1Wins;
            numTies = numTies-p2Wins;
            numTies= numTies-1;
        
        //if the number of rounds is less than the maximum number of rounds
        if (myModel.getRound() < myModel.getMAX_ROUNDS()) {

            //set the label to tell how many rounds and how many rounds each player has won
            
            
            jRoundsLabel.setText("It is round " + myModel.getRound() + ". \n "
                    + myModel.getP1().getName() + " has " + p1.getRoundsWon() + " wins.\n "
                    + myModel.getP2().getName() + " has " + p2.getRoundsWon() + " wins.\n "
            + "There have been " + numTies +" ties in the game");

            //if the number of rounds is greater than or equal to the maximum number of rounds
        } else {

            //set the label to tell how many rounds and how many rounds each player has won and that its the last round
            jRoundsLabel.setText("This is the last round.\n It is round " + myModel.getRound() + "\n. "
                    + myModel.getP1().getName() + " has " + p1.getRoundsWon() + " wins.\n "
                    + myModel.getP2().getName() + " has " + p1.getRoundsWon() + " wins.\n"
            + "There have been " + numTies +" ties in the game");
        }

        //if the game is over
        if (myModel.isGameOver()) {

            //if its a tie
            if (myModel.getWin() == Win.NONE) {

                //set the label to say its a tie instead of someone won
                jLabelTurn.setText("It is a tie");

                //if its not a tie
            } else {

                //if its player ones turn
                if (myModel.isP1Turn()) {

                    //say that player one won the game
                    jLabelTurn.setText(myModel.getP1().getName() + " wins!!!");

                    //incremement player ones win number for that rounds 
                    
                     p1.setRoundsWon(p1.getRoundsWon()+1);

                    //if its player twos turn
                } else {

                    //say that player two won the game
                    jLabelTurn.setText(myModel.getP2().getName() + " wins!!!");

                    //incremement player twos win number to keep track of how many rounds they won total
                    
                     p2.setRoundsWon(p2.getRoundsWon()+1);
                }
            }

            //TO DO fix rounds display
            //if the number of rounds is less than the number of maximum rounds 
            if (myModel.getRound() < myModel.getMAX_ROUNDS()) {

                //enable the next round button
                jButtonNextRound.setEnabled(true);

                //if the number of rounds is greater than or equal to the maximum rounds
            } else if (myModel.getMAX_ROUNDS() <= myModel.getRound()) {

                //disable the next round button
                jButtonNextRound.setEnabled(false);

            }

            //enable the quit button
            jButtonQuit.setEnabled(true);

            return;
        }

        // update player label 
        if (myModel.isP1Turn()) {
            jLabelTurn.setText(myModel.getP1().getName() + "'s turn.");
        } else {
            jLabelTurn.setText(myModel.getP2().getName() + "'s turn.");
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBottomLeft;
    private javax.swing.JButton jButtonBottomMiddle;
    private javax.swing.JButton jButtonBottomRight;
    private javax.swing.JButton jButtonCenter;
    private javax.swing.JButton jButtonMiddleLeft;
    private javax.swing.JButton jButtonMiddleRight;
    private javax.swing.JButton jButtonNextRound;
    private javax.swing.JButton jButtonQuit;
    private javax.swing.JButton jButtonTopLeft;
    private javax.swing.JButton jButtonTopMiddle;
    private javax.swing.JButton jButtonTopRight;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelGrid;
    private javax.swing.JLabel jLabelTurn;
    private javax.swing.JLayeredPane jLayeredPaneTTT;
    private javax.swing.JLabel jRoundsLabel;
    // End of variables declaration//GEN-END:variables
}
